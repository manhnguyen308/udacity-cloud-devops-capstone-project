version: 2.1

jobs:
  build-code:
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-

      # run build
      - run:
          name: install dependencies
          command: |
            make setup
            make install

      # run lint
      - run:
          name: run lint
          command: |
            make setup
            make lint

      - save_cache:
          paths:
            - ~/.devops
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  upload-docker:
    docker:
      - image: circleci/golang:1.15

    working_directory: ~/project

    steps:
      - checkout

      - setup_remote_docker:
          version: 19.03.13

      - run:
          name: Build docker container
          command: |
            docker build --tag=$DOCKER_IMAGE .
            docker image ls

      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE"
            docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
            docker tag $DOCKER_IMAGE $DOCKER_USERNAME/$DOCKER_IMAGE:${CIRCLE_WORKFLOW_ID:0:7}
            docker push $DOCKER_USERNAME/$DOCKER_IMAGE:${CIRCLE_WORKFLOW_ID:0:7}

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure server instances exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/server/server.yml \
              --tags project=udacity-capstone-project-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udacity-capstone-eks-server-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://.circleci/server/server-parameters.json
      - run:
          name: Install tar
          command: |
            yum install -y tar gzip
      - run:
          name: Add nodegroup IP to ansible inventory
          command: |
            echo [server] > ~/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=capstone-project-server*" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d6:03:04:bb:25:04:b6:ad:8c:df:d4:a6:cc:96:d3:2e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cat ~/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i ~/inventory.txt configure-server.yml

  deploy-docker:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d6:03:04:bb:25:04:b6:ad:8c:df:d4:a6:cc:96:d3:2e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy newest Docker Image
          command: |
            cat ~/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i ~/inventory.txt deploy-app.yml
          no_output_timeout: 2m

workflows:
  default:
    jobs:
      - build-code
      - upload-docker:
          requires:
            - build-code
          filters:
            branches:
              only: [ main ]
      - deploy-infrastructure:
          filters:
            branches:
              only: [ main ]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure